import React, { useState } from 'react';
import { UploadCloud, CheckCircle, XCircle, Loader, Info, Leaf, Microscope, Camera, TrendingUp, Droplets, Sun } from 'lucide-react';

function App() {
Â  const [selectedFile, setSelectedFile] = useState(null);
Â  const [previewUrl, setPreviewUrl] = useState(null);
Â  const [predictionResult, setPredictionResult] = useState(null);
Â  const [loading, setLoading] = useState(false);
Â  const [error, setError] = useState(null);

Â  const API_URL = 'http://localhost:5000/predict';

Â  const handleFileChange = (event) => {
Â  Â  const file = event.target.files[0];
Â  Â  if (file) {
Â  Â  Â  setSelectedFile(file);
Â  Â  Â  setPreviewUrl(URL.createObjectURL(file));
Â  Â  Â  setPredictionResult(null);
Â  Â  Â  setError(null);
Â  Â  } else {
Â  Â  Â  setSelectedFile(null);
Â  Â  Â  setPreviewUrl(null);
Â  Â  Â  setPredictionResult(null);
Â  Â  }
Â  };

Â  const handleSubmit = async () => {
Â  Â  if (!selectedFile) {
Â  Â  Â  setError("Please select an image to upload.");
Â  Â  Â  return;
Â  Â  }

Â  Â  setLoading(true);
Â  Â  setError(null);
Â  Â  setPredictionResult(null);

Â  Â  const formData = new FormData();
Â  Â  formData.append('image', selectedFile);

Â  Â  try {
Â  Â  Â  const response = await fetch(API_URL, {
Â  Â  Â  Â  method: 'POST',
Â  Â  Â  Â  body: formData,
Â  Â  Â  });

Â  Â  Â  if (!response.ok) {
Â  Â  Â  Â  const errorData = await response.json();
Â  Â  Â  Â  throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
Â  Â  Â  }

Â  Â  Â  const data = await response.json();
Â  Â  Â  setPredictionResult(data);
Â  Â  } catch (err) {
Â  Â  Â  console.error("Prediction failed:", err);
Â  Â  Â  setError(err.message || "Failed to get prediction. Please try again.");
Â  Â  } finally {
Â  Â  Â  setLoading(false);
Â  Â  }
Â  };

Â  const getPhColorClass = (ph) => {
Â  Â  if (!ph) return 'text-gray-600';
Â  Â  const phNum = parseFloat(ph);
Â  Â  if (phNum < 6.0) return 'text-orange-600';
Â  Â  if (phNum > 6.8) return 'text-blue-600';
Â  Â  return 'text-green-600';
Â  };

Â  const getPhStatus = (ph) => {
Â  Â  if (!ph) return 'Unknown';
Â  Â  const phNum = parseFloat(ph);
Â  Â  if (phNum < 6.0) return 'Too Acidic';
Â  Â  if (phNum > 6.8) return 'Too Alkaline';
Â  Â  return 'Optimal for Tomatoes';
Â  };


Â  const getSoilQualityColorClass = (quality) => {
Â  Â  switch (quality) {
Â  Â  Â  case 'Excellent':
Â  Â  Â  Â  return 'text-emerald-600';
Â  Â  Â  case 'Good':
Â  Â  Â  Â  return 'text-green-600';
Â  Â  Â  case 'Okay':
Â  Â  Â  Â  return 'text-amber-600';
Â  Â  Â  case 'Challenging':
Â  Â  Â  Â  return 'text-red-600';
Â  Â  Â  default:
Â  Â  Â  Â  return 'text-gray-600';
Â  Â  }
Â  };


Â  const renderLoadingState = () => (
Â  Â  <div className="flex flex-col items-center justify-center py-16 px-8">
Â  Â  Â  <div className="relative">
Â  Â  Â  Â  <div className="w-20 h-20 border-4 border-emerald-200 rounded-full animate-spin border-t-emerald-500"></div>
Â  Â  Â  Â  <Microscope className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 h-8 w-8 text-emerald-600" />
Â  Â  Â  </div>
Â  Â  Â  <h3 className="text-2xl font-semibold text-gray-800 mt-6 mb-2">Analyzing Your Soil</h3>
Â  Â  Â  <p className="text-gray-600 text-center max-w-sm">Our AI is examining your soil sample using advanced machine learning algorithms...</p>
Â  Â  Â  <div className="flex space-x-1 mt-4">
Â  Â  Â  Â  <div className="w-2 h-2 bg-emerald-500 rounded-full animate-bounce" style={{animationDelay: '0ms'}}></div>
Â  Â  Â  Â  <div className="w-2 h-2 bg-emerald-500 rounded-full animate-bounce" style={{animationDelay: '150ms'}}></div>
Â  Â  Â  Â  <div className="w-2 h-2 bg-emerald-500 rounded-full animate-bounce" style={{animationDelay: '300ms'}}></div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );

Â  const renderErrorState = () => (
Â  Â  <div className="flex flex-col items-center justify-center py-16 px-8 text-center">
Â  Â  Â  <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center mb-6">
Â  Â  Â  Â  <XCircle className="h-10 w-10 text-red-500" />
Â  Â  Â  </div>
Â  Â  Â  <h3 className="text-2xl font-semibold text-gray-800 mb-2">Analysis Failed</h3>
Â  Â  Â  <p className="text-gray-600 max-w-sm">{error}</p>
Â  Â  Â  <button
Â  Â  Â  Â  onClick={() => setError(null)}
Â  Â  Â  Â  className="mt-6 px-6 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600 transition-colors"
Â  Â  Â  >
Â  Â  Â  Â  Try Again
Â  Â  Â  </button>
Â  Â  </div>
Â  );

Â  const renderResults = () => (
Â  Â  <div className="space-y-8">
Â  Â  Â  {/* Main Result Card */}
Â  Â  Â  <div className="bg-gradient-to-br from-emerald-50 to-teal-50 border border-emerald-200 rounded-2xl p-8">
Â  Â  Â  Â  <div className="flex items-center justify-center mb-6">
Â  Â  Â  Â  Â  <div className="w-16 h-16 bg-emerald-500 rounded-full flex items-center justify-center">
Â  Â  Â  Â  Â  Â  <Microscope className="h-8 w-8 text-white" />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <h3 className="text-3xl font-bold text-center text-gray-800 mb-2">
Â  Â  Â  Â  Â  {predictionResult.predicted_soil_type}
Â  Â  Â  Â  </h3>
Â  Â  Â  Â  <div className="text-center mb-6">
Â  Â  Â  Â  Â  <span className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-emerald-100 text-emerald-800">
Â  Â  Â  Â  Â  Â  {predictionResult.confidence}% Confidence
Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  </div>

Â  Â  Â  Â  {/* pH Information */}
Â  Â  Â  Â  {predictionResult.predicted_pH && (
Â  Â  Â  Â  Â  <div className="bg-white rounded-xl p-6 border border-emerald-100">
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-2 gap-6">
Â  Â  Â  Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  Â  Â  Â  <Droplets className="h-8 w-8 mx-auto mb-2 text-blue-500" />
Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="text-lg font-semibold text-gray-700">pH Level</h4>
Â  Â  Â  Â  Â  Â  Â  Â  <p className={`text-3xl font-bold ${getPhColorClass(predictionResult.predicted_pH)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {predictionResult.predicted_pH}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  <p className={`text-sm font-medium ${getPhColorClass(predictionResult.predicted_pH)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {getPhStatus(predictionResult.predicted_pH)}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  Â  Â  Â  <TrendingUp className="h-8 w-8 mx-auto mb-2 text-emerald-500" />
Â  Â  Â  Â  Â  Â  Â  Â  <h4 className="text-lg font-semibold text-gray-700">Soil Quality</h4>
Â  Â  Â  Â  Â  Â  Â  Â  {/* --- UPDATED LINE FOR SOIL QUALITY --- */}
Â  Â  Â  Â  Â  Â  Â  Â  <p className={`text-3xl font-bold ${getSoilQualityColorClass(predictionResult.soil_quality)}`}>
Â  Â  Â  Â  Â  Â  Â  Â  Â  {predictionResult.soil_quality}
Â  Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  Â  Â  {/* --- END UPDATED LINE --- */}
Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500">For Tomato Growth</p>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="mt-4 p-3 bg-blue-50 rounded-lg">
Â  Â  Â  Â  Â  Â  Â  <p className="text-xs text-blue-700 text-center">
Â  Â  Â  Â  Â  Â  Â  Â  ðŸ’¡ Optimal pH range for tomatoes: 6.0 - 6.8
Â  Â  Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}

Â  Â  Â  Â  {/* Confidence Chart */}
Â  Â  Â  Â  {predictionResult.chart_image && (
Â  Â  Â  Â  Â  <div className="mt-6">
Â  Â  Â  Â  Â  Â  <h4 className="text-lg font-semibold text-gray-700 mb-3">Prediction Breakdown</h4>
Â  Â  Â  Â  Â  Â  <div className="bg-white rounded-xl p-4 border border-emerald-100">
Â  Â  Â  Â  Â  Â  Â  <img 
Â  Â  Â  Â  Â  Â  Â  Â  src={`data:image/png;base64,${predictionResult.chart_image}`} 
Â  Â  Â  Â  Â  Â  Â  Â  alt="Prediction Confidence Chart"
Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-auto rounded-lg"
Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  )}
Â  Â  Â  </div>

Â  Â  Â  {/* Recommendations Card */}
Â  Â  Â  <div className="bg-gradient-to-br from-amber-50 to-orange-50 border border-amber-200 rounded-2xl p-8">
Â  Â  Â  Â  <div className="flex items-center mb-6">
Â  Â  Â  Â  Â  <div className="w-12 h-12 bg-amber-500 rounded-full flex items-center justify-center mr-4">
Â  Â  Â  Â  Â  Â  <Leaf className="h-6 w-6 text-white" />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <h3 className="text-2xl font-bold text-gray-800">Recommendations</h3>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="prose prose-gray max-w-none">
Â  Â  Â  Â  Â  <p className="text-gray-700 leading-relaxed text-lg">
Â  Â  Â  Â  Â  Â  {predictionResult.recommendations}
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="mt-8 pt-6 border-t border-amber-200">
Â  Â  Â  Â  Â  <div className="flex items-center justify-between text-sm text-gray-600">
Â  Â  Â  Â  Â  Â  <span className="flex items-center">
Â  Â  Â  Â  Â  Â  Â  <Info className="h-4 w-4 mr-2" />
Â  Â  Â  Â  Â  Â  Â  Analysis completed
Â  Â  Â  Â  Â  Â  </span>
Â  Â  Â  Â  Â  Â  <span>{new Date(predictionResult.timestamp).toLocaleString()}</span>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>
Â  Â  </div>
Â  );

Â  const renderUploadArea = () => (
Â  Â  <div className="text-center py-16 px-8">
Â  Â  Â  <div className="max-w-md mx-auto">
Â  Â  Â  Â  <label htmlFor="image-upload" className="cursor-pointer block">
Â  Â  Â  Â  Â  <div className="w-24 h-24 mx-auto mb-6 bg-gradient-to-br from-emerald-400 to-teal-500 rounded-full flex items-center justify-center hover:from-emerald-500 hover:to-teal-600 transition-all duration-300 transform hover:scale-105">
Â  Â  Â  Â  Â  Â  <Camera className="h-12 w-12 text-white" />
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <h3 className="text-2xl font-bold text-gray-800 mb-2">Upload Soil Image</h3>
Â  Â  Â  Â  Â  <p className="text-gray-600 mb-6">Click to select an image of your soil sample</p>
Â  Â  Â  Â  Â  <div className="border-2 border-dashed border-emerald-300 rounded-2xl p-8 hover:border-emerald-400 hover:bg-emerald-50 transition-all duration-300">
Â  Â  Â  Â  Â  Â  <UploadCloud className="h-16 w-16 text-emerald-500 mx-auto mb-4" />
Â  Â  Â  Â  Â  Â  <p className="text-lg font-medium text-emerald-700">Choose Image File</p>
Â  Â  Â  Â  Â  Â  <p className="text-sm text-gray-500 mt-2">JPEG, PNG, or GIF â€¢ Optimized for 224Ã—224px</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </label>
Â  Â  Â  Â  <input
Â  Â  Â  Â  Â  id="image-upload"
Â  Â  Â  Â  Â  type="file"
Â  Â  Â  Â  Â  accept="image/*"
Â  Â  Â  Â  Â  onChange={handleFileChange}
Â  Â  Â  Â  Â  className="hidden"
Â  Â  Â  Â  />
Â  Â  Â  </div>
Â  Â  </div>
Â  );

Â  const renderImagePreview = () => (
Â  Â  <div className="space-y-6">
Â  Â  Â  {/* Image Preview */}
Â  Â  Â  <div className="bg-white rounded-2xl p-6 border border-gray-200 shadow-sm">
Â  Â  Â  Â  <div className="aspect-square bg-gray-50 rounded-xl mb-4 overflow-hidden border border-gray-200">
Â  Â  Â  Â  Â  <img 
Â  Â  Â  Â  Â  Â  src={previewUrl} 
Â  Â  Â  Â  Â  Â  alt="Soil Sample Preview" 
Â  Â  Â  Â  Â  Â  className="w-full h-full object-cover"
Â  Â  Â  Â  Â  />
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <div className="text-center">
Â  Â  Â  Â  Â  <p className="text-lg font-semibold text-gray-800 mb-2">{selectedFile.name}</p>
Â  Â  Â  Â  Â  <p className="text-sm text-gray-500">
Â  Â  Â  Â  Â  Â  Size: {(selectedFile.size / 1024).toFixed(1)} KB
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Action Buttons */}
Â  Â  Â  <div className="space-y-3">
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={handleSubmit}
Â  Â  Â  Â  Â  disabled={loading}
Â  Â  Â  Â  Â  className="w-full bg-gradient-to-r from-emerald-500 to-teal-600 hover:from-emerald-600 hover:to-teal-700 disabled:from-gray-400 disabled:to-gray-500 text-white font-bold py-4 px-6 rounded-xl text-lg flex items-center justify-center space-x-3 transition-all duration-300 transform hover:scale-105 disabled:scale-100 disabled:cursor-not-allowed shadow-lg"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  {loading ? (
Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  <Loader className="animate-spin h-6 w-6" />
Â  Â  Â  Â  Â  Â  Â  <span>Analyzing...</span>
Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <>
Â  Â  Â  Â  Â  Â  Â  <Microscope className="h-6 w-6" />
Â  Â  Â  Â  Â  Â  Â  <span>Analyze Soil</span>
Â  Â  Â  Â  Â  Â  </>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </button>
Â  Â  Â  Â  
Â  Â  Â  Â  <button
Â  Â  Â  Â  Â  onClick={() => {
Â  Â  Â  Â  Â  Â  setSelectedFile(null);
Â  Â  Â  Â  Â  Â  setPreviewUrl(null);
Â  Â  Â  Â  Â  Â  setPredictionResult(null);
Â  Â  Â  Â  Â  Â  setError(null);
Â  Â  Â  Â  Â  }}
Â  Â  Â  Â  Â  className="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 font-medium py-3 px-6 rounded-xl transition-colors"
Â  Â  Â  Â  >
Â  Â  Â  Â  Â  Upload Different Image
Â  Â  Â  Â  </button>
Â  Â  Â  </div>
Â  Â  </div>
Â  );

Â  return (
Â  Â  <div className="min-h-screen bg-gradient-to-br from-slate-50 via-emerald-50 to-teal-50">
Â  Â  Â  {/* Header */}
Â  Â  Â  <header className="text-center py-12 px-4">
Â  Â  Â  Â  <div className="max-w-4xl mx-auto">
Â  Â  Â  Â  Â  <div className="flex items-center justify-center mb-6">
Â  Â  Â  Â  Â  Â  <div className="w-16 h-16 bg-gradient-to-br from-emerald-500 to-teal-600 rounded-2xl flex items-center justify-center mr-4">
Â  Â  Â  Â  Â  Â  Â  <Leaf className="h-8 w-8 text-white" />
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="text-left">
Â  Â  Â  Â  Â  Â  Â  <h1 className="text-4xl font-bold bg-gradient-to-r from-emerald-600 to-teal-700 bg-clip-text text-transparent">
Â  Â  Â  Â  Â  Â  Â  Â  Soil Analyzer for Tomatoes
Â  Â  Â  Â  Â  Â  Â  </h1>
Â  Â  Â  Â  Â  Â  Â  <p className="text-xl text-gray-600">Smart Agriculture Technology</p>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <p className="text-lg text-gray-700 max-w-2xl mx-auto">
Â  Â  Â  Â  Â  Â  Advanced machine learning analysis to optimize your tomato crop yield through precision soil assessment
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  </header>

Â  Â  Â  {/* Main Content */}
Â  Â  Â  <div className="max-w-6xl mx-auto px-4 pb-12">
Â  Â  Â  Â  <div className="bg-white rounded-3xl shadow-2xl border border-gray-200 overflow-hidden">
Â  Â  Â  Â  Â  {!selectedFile && !loading && !error && !predictionResult ? (
Â  Â  Â  Â  Â  Â  renderUploadArea()
Â  Â  Â  Â  Â  ) : (
Â  Â  Â  Â  Â  Â  <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 p-8">
Â  Â  Â  Â  Â  Â  Â  {/* Left Column */}
Â  Â  Â  Â  Â  Â  Â  <div className="space-y-6">
Â  Â  Â  Â  Â  Â  Â  Â  {selectedFile && !predictionResult && !loading && !error ? (
Â  Â  Â  Â  Â  Â  Â  Â  Â  renderImagePreview()
Â  Â  Â  Â  Â  Â  Â  Â  ) : selectedFile && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="bg-gray-50 rounded-2xl p-6">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="aspect-square bg-white rounded-xl mb-4 overflow-hidden border border-gray-200">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <img 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  src={previewUrl} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  alt="Analyzed Soil Sample" 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="w-full h-full object-cover"
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  />
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <p className="text-center text-gray-600 font-medium">{selectedFile.name}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  </div>

Â  Â  Â  Â  Â  Â  Â  {/* Right Column */}
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  {loading && renderLoadingState()}
Â  Â  Â  Â  Â  Â  Â  Â  {error && renderErrorState()}
Â  Â  Â  Â  Â  Â  Â  Â  {predictionResult && renderResults()}
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  </div>
Â  Â  Â  </div>

Â  Â  Â  {/* Footer */}
Â  Â  Â  <footer className="text-center py-8 px-4 bg-white border-t border-gray-200">
Â  Â  Â  Â  <div className="max-w-4xl mx-auto">
Â  Â  Â  Â  Â  <div className="flex items-center justify-center mb-4">
Â  Â  Â  Â  Â  Â  <Sun className="h-5 w-5 text-amber-500 mr-2" />
Â  Â  Â  Â  Â  Â  <p className="text-gray-600">Empowering sustainable agriculture with AI-driven insights</p>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  <p className="text-sm text-gray-500">
Â  Â  Â  Â  Â  Â  Built with Flask, TensorFlow/Keras, and React.js â€¢ Â© 2025 Soil Analyzer Project
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  </footer>
Â  Â  </div>
Â  );
}

export default App;
